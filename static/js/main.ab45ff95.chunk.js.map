{"version":3,"sources":["shareButton.jsx","InputInfo.jsx","form.jsx","App.js","serviceWorker.js","index.js"],"names":["ShareButton","props","InputInfo","className","type","step","onClick","shareContents","Form","liff","isLoggedIn","isApiAvaileable","shareTargetPicker","text","login","redirectUri","state","Fragment","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAMeA,EALK,SAACC,GACjB,OACI,4GCqCOC,EAvCG,SAACD,GACf,OACI,8BACI,yBAAKE,UAAU,SACX,uJACA,2BAAOC,KAAK,UAEhB,yBAAKD,UAAU,aACX,6GACJ,2BAAOC,KAAK,OAAOC,KAAO,SAE1B,yBAAMF,UAAY,WACd,6GACA,2BAAOC,KAAK,OAAOC,KAAO,SAG9B,yBAAKF,UAAU,UACX,6GACA,gCACI,qCACA,qCACA,qCACA,qCACA,qCACA,uCAIR,yBAAKA,UAAU,OACX,8GACA,2BAAOC,KAAO,SAGlB,4BAAQE,QAASL,EAAMM,eAAvB,kB,gBCYGC,E,kDAxCX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IASVM,cAAgB,WAERE,IAAKC,aAIAD,IAAKE,gBAAgB,sBAC1BF,IAAKG,kBAAkB,CACnB,CACIR,KAAM,OACNS,KAAM,iBAPdJ,IAAKK,MAAM,CAAEC,YAAa,4BAX9B,EAAKC,MAAQ,GAFE,E,qDA6Bf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,CAAWV,cAAeW,KAAKX,gBAC/B,kBAAC,EAAD,W,GAjCGY,IAAMC,WCMVC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab45ff95.chunk.js","sourcesContent":["import React from 'react';\r\nconst ShareButton = (props) => {\r\n    return(\r\n        <button >共有sharebottnoのコンポーネント</button>\r\n    );\r\n}\r\nexport default ShareButton ","import React from 'react';\r\nconst InputInfo = (props) => {\r\n    return (\r\n        <form>\r\n            <div className='title'>\r\n                <p>ミーティングのタイトルを記入してください</p>\r\n                <input type='text'></input>\r\n            </div>\r\n            <div className='starttime'>\r\n                <p>開始時間を記入してください</p>\r\n            <input type='time' step = \"300\"></input>\r\n            </div>\r\n            <div  className = 'endtime'>\r\n                <p>終了時間を記入してください</p>\r\n                <input type='time' step = \"300\"></input>\r\n            </div>\r\n\r\n            <div className='people'>\r\n                <p>募集人数を記入してください</p>\r\n                <select>\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                    <option>6</option>\r\n\r\n                </select>\r\n            </div>\r\n            <div className='url'>\r\n                <p>zoom等のURLを貼り付けてください</p>\r\n                <input type = 'url'></input>\r\n            </div>\r\n\r\n            <button onClick={props.shareContents}>共有</button>\r\n\r\n\r\n        </form>\r\n    );\r\n}\r\nexport default InputInfo","import React from 'react';\r\nimport ShareButton from './shareButton';\r\nimport InputInfo from './InputInfo'\r\nimport liff from 'react-liff';\r\n\r\nclass Form extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    shareContents = () => {\r\n        \r\n        if(!liff.isLoggedIn()) {\r\n            liff.login({ redirectUri: \"https://localhost:3000\" });\r\n        }\r\n        \r\n        else if (liff.isApiAvaileable('shareTargetPicker')) {\r\n            liff.shareTargetPicker([\r\n                {\r\n                    type: \"text\",\r\n                    text: \"hello world\",\r\n                }\r\n            ])\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render () {\r\n        return(\r\n            <React.Fragment>\r\n                <InputInfo shareContents={this.shareContents} />\r\n                <ShareButton />\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Form","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Form from './form.jsx';\n\nfunction App() {\n  return (\n    <Form />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}